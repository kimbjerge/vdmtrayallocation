-- ===========================================================================
-- SorterEnvironment in tray allocation for a sortation system
-- By José Antonio Esparza and Kim Bjerge - spring 2010
-- ===========================================================================

class SorterEnviroment
	types

	values
		public Speed	   : nat1 = 2000;  -- Sorter speed mm/sec
		public Throughput  : nat = 10000;  -- Required items/hour
		public StepMs 	   : nat = 100;
		public TUinMS      : nat = (StepMs * TrayAllocator`TrayStepTimeUnits) 
		                           / ((Tray`Size * 1000) / Speed); 	
				
	instance variables
	    	    
		public inductionGroup : seq of InductionController := [];
		itemId : nat := 0;
		itemLoader : [ItemLoader] := nil;
		busy : bool := true;
		msCount : nat := 0;
		nextMs : nat := 0;
					
	operations
	
    -- SorterEnviroment constructor
	public SorterEnviroment: () ==> SorterEnviroment
	SorterEnviroment() ==
	(
	);
	
    -- Assigning item loader to SorterEnviroment
	public AssignItemLoader: (ItemLoader) ==> ()
	AssignItemLoader(il) ==
	(
		itemLoader := il;
	);	
	
    -- Assigning induction group to SorterEnviroment
	public AssignInductionGroup: seq of InductionController ==> ()
	AssignInductionGroup(ig) ==
	(
		inductionGroup := ig;
	);
			
	public isFinished : () ==> () 
	isFinished() == skip;
	
	-- Create assignments releations between objects
	CreateAssignments: () ==> ()
	CreateAssignments () ==
	(
        SC`allocator.CreateAllocatorObjs();
		SC`ic1.AssignAllocator(SC`allocator);
		SC`ic2.AssignAllocator(SC`allocator);
		SC`ic3.AssignAllocator(SC`allocator);
		SC`ic4.AssignAllocator(SC`allocator);
        AssignInductionGroup(SC`inductionGroup);
	);
		
	functions

	sync
	
	per isFinished => not busy;

	thread
    (
        CreateAssignments();
        
        -- Start all threads in the system
		start (SC`allocator);
   		for all i in set {1,...,TrayAllocator`NumOfInductions} 
		do start (inductionGroup(i));
   	    	    	 	
  		while busy do
   		(
   	    	-- IO`print("< " ^ String`NatToStr(time) ^ ">>>");
   			if (time  > nextMs)
   			then
   			(
		 		nextMs := time + TUinMS;
	 	 	 	for all i in set {1,...,TrayAllocator`NumOfInductions} 
				do 
				(
					-- Check for item to feed induction at time step
				 	let size = itemLoader.GetItemAtTimeStep(msCount, i)
				 	in
						if (size > 0)
						then 
						(
				  			itemId := itemId + 1;
							IO`print("[ " ^ String`NatToStr(msCount) 
							^ ", " ^ String`NatToStr(itemId) 
							^ ", " ^ String`NatToStr(size) 
							^ ", " ^ String`NatToStr(time) 
							^ "]\n");
				  			inductionGroup(i).FeedItem(size, itemId);
						);
		 		);
	 			msCount := msCount + StepMs;
	 		);
	 		
            -- Check if simulation is finish
   			if (time >= itemLoader.GetNumTimeSteps()*(TUinMS/StepMs)) then
   			(
   				SC`allocator.StopSimulation();
   				busy := false;
   			);

   		);

   	);

 
	traces
	
end SorterEnviroment