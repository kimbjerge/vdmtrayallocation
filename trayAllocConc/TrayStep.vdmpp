class TrayStep

instance variables

	public static stepTime : int := -1; 	   -- Time it takes to move a tray in ms
	public static counts : nat := 0;		   -- Counting number of tray steps simulation running
	waitTrayStepMap : map nat to nat := {|->}; -- Map of waiting threads to tray step count

operations

	-- TrayStep constructor
	public TrayStep : nat1 ==> TrayStep
	TrayStep(speed) == 
	(
		stepTime := (Tray`Size*1000)/speed;    -- [mm]*1000 / [mm/sec]
	);
	
	-- Thread waiting until tray steps passed
	public WaitSteps : nat ==> ()
	WaitSteps(steps) ==
	(
	  AddToMap(threadid, counts + steps);
	  Wait();
    );
    
	-- Add threadid to map 
	AddToMap : nat * nat ==> ()
	AddToMap(tId, step) ==
   		waitTrayStepMap := waitTrayStepMap ++ { tId |-> step };
    
    -- Thread blocked until removed from Map
	Wait: () ==> ()
	Wait() == skip;

    -- Threadid remove from map of waiting threads 
	RemoveFromMap : nat ==> ()
	RemoveFromMap(tId) ==
 		waitTrayStepMap := {tId} <-: waitTrayStepMap;
 	
 	-- Notifies waiting threads if TraySteps passed	
 	NotifyWatingThreads : () ==> ()
	NotifyWatingThreads() ==
  	let threadSet : set of nat = {th | th in set dom waitTrayStepMap & waitTrayStepMap(th) <= counts }
  	in
    	for all t in set threadSet 
    	do
      		RemoveFromMap(t);
      			
 	public static GetCounts : () ==> nat
	GetCounts () == return counts;
	
	IncCounts : () ==> ()
	IncCounts () == counts := counts + 1;
	
sync
	per Wait => threadid not in set dom waitTrayStepMap;
	
	-- mutex(GetCounts, IncCounts);			  -- Block reading counter while incrementing
	
thread 

	while true do
 	(
   		IncCounts();
   		NotifyWatingThreads();

   	    IO`print("< " ^ String`NatToStr(counts) ^ ">");
   		World`timerRef.WaitRelative(stepTime);
   		World`timerRef.NotifyAll();
   		World`timerRef.Awake();

 	)

 end TrayStep