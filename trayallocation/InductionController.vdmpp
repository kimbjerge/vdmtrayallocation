-- ===============================================================================================================
-- InductionController in tray allocation for a sortation system
-- By José Antonio Esparza and Kim Bjerge - spring 2010
-- ===============================================================================================================

class InductionController
	types

	values
		public InductionRate : nat = 2;    	-- trays between each item
		public InductionRateInMs : nat = (InductionRate * Tray`Size * 1000) / SorterEnviroment`Speed; -- [mm] / [mm/msec]

	instance variables		
		priority : nat := 0;				-- priotity of induction, incremented each time wait to induct item
		id : nat1;							-- Induction ID 
		allocator : TrayAllocator; 			-- TrayAllocator
		items : seq of Item := [];			-- set of items ready to be inducted
		stepCount: nat := 0; 				-- Counts the number of steps between inducting items
		selfIC : InductionController;
	
		-- If induction is waiting there must be items in sequence
		inv priority > 0 => len items > 0;
	
	operations

    -- InductionController constructor
	public InductionController: TrayAllocator * nat ==> InductionController
	InductionController(a, n) ==
	(
		allocator := a;
		id := n;
		selfIC := self;
	);
	
	-- Returns induction controller UID
	public GetId: () ==> nat
	GetId() == 
		return id;
	
	-- Returns priority of induction controller	
	public GetPriority: () ==> nat
	GetPriority() == 
		return priority;
	
	-- Returns true if induction is wating with an item
	public IsItemWaiting: () ==> bool
	IsItemWaiting() ==
		return priority > 0;		
		
	-- Get size of waiting item in number of trays
	public GetSizeOfWaitingItem: () ==> nat
	GetSizeOfWaitingItem() ==
		if not IsItemWaiting()
		then
			return 0 -- No waiting items
		else
			let item = hd items
				in item.GetSizeOfTrays();
		  		
    -- Enviroment feeds a new item on induction
	public FeedItem: Item ==> ()
	FeedItem(i) ==
		items := items ^ [i];

    -- Simulate sorter-ring moved one tray step
	public TrayStep: () ==> ()
	TrayStep() ==
	(
		-- Induct next item based on InductionRate
		stepCount := stepCount + 1;
		if IsItemWaiting() or (stepCount >= InductionRate)
		then
		(
			InductNextItem();
			stepCount := 0;
		)
	);

	-- If next item could be inducted then removed it from the head of item sequence
	-- If item could not be inducted then increment priority
    private InductNextItem: () ==> ()
    InductNextItem() ==
		-- let n = len items  
		-- in
			-- if n > 0
			-- then
				let item = hd items
			  	in
			  		if allocator.InductItem(self, item)
			  		then
			    	(
						atomic -- Due to invariant
						(
			    			items := tl items;
			    			priority := 0
			    		);
			    	)
			  		else 
			    		priority := priority + 1; -- Increment priority wait counter			  		
 
    -- Returns the next item to be inducted
    GetFirstItem: () ==> Item
    GetFirstItem() ==
    	return hd items
    pre len items <> 0;
    
    -- Removes the first item in sequence and clear priority - called from TrayAllocator
 	public InductFirstItem: () ==> ()
 	InductFirstItem() ==
		atomic -- Due to invariant
		(
   			items := tl items;
   			priority := 0
   		)
   	pre len items <> 0;
 	
 	-- Increment priority for number of tray steps waiting - called from TrayAllocator
 	public IncrementPriority: () ==> ()
 	IncrementPriority() ==
   		priority := priority + 1; -- Increment priority wait counter	
   	
   	-- Blocked until items to induct	
   	ItemsToInduct: () ==> bool
   	ItemsToInduct () ==
   		return len items <> 0;		  		
 	  
	functions

	sync
		-- Ensure mutex access to item sequence
		
		-- Enviroment and InductionController threads
		mutex (FeedItem, InductNextItem);
		--mutex (FeedItem);
		
		-- TrayAllocator and InductionController threads
		--mutex (InductFirstItem);
		--mutex (IncrementPriority);
		mutex (GetFirstItem, IncrementPriority, InductFirstItem); 
		
		-- Block thread if no items to induct 
		per InductNextItem => len items > 0;
		per ItemsToInduct => len items > 0;
		
	thread
	(
		while (ItemsToInduct()) do
		(
		    -- Request tray allocator to induct item and wait for induction
			allocator.RequestTray(threadid, selfIC, GetFirstItem());
			allocator.Wait();

		    -- Wait time equal InductionRate in tray steps 
		    -- to keep separation between items
			SorterEnviroment`trayStep.WaitSteps(InductionRate);
			
			--World`timerRef.WaitRelative(InductionRateInMs);
			--World`timerRef.Awake();
		);	
	);
		
	/* Tray Step version
		while (true) do
		(
			-- Induct next item based on InductionRate
			SorterEnviroment`trayStep.WaitSteps(1);
			stepCount := stepCount + 1;
	   		
			if IsItemWaiting() or (stepCount >= InductionRate)
			then
			(
				InductNextItem();
		   		--World`timerRef.WaitRelative(InductionRate * someting);
				stepCount := 0;
			)
		);
	*/
	traces

end InductionController