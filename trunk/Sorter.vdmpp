class Sorter
	instance variables 
		private trays : map Tray`TrayId to set of Tray := {|->}; 	-- R5
		private inductGroups : seq of InductGroup := [];
		private dicharges : seq of Discharge := [];
		inv forall id in set dom trays & 							-- R9
				exists tray in set trays(id) &
				    tray.GetItems() < 2

	values 
	    Speed: nat = 2  -- m/s

	operations 
	
	public Sorter: () ==> Sorter
	Sorter() ==
	(
 	);
	
	public TrayAllocate: Induction ==> ()
	TrayAllocate(induction) ==
	(
	    dcl trayId : Tray`TrayId := 1;
	    -- for all trayId in set dom trays do
	    --	if trays(trayId) = <Empty> 
	    induction.TrayAssign(trayId);
	);

	public InductParcel: Item * nat ==> ()
	InductParcel(parcel, trayId) ==
	(
		-- for all id in set dom trays &
		--	exists tray in set trays(id) &
		--	   if id = trayId 
		--	   then tray.ParcelOnTray(parcel)
	);	

	public TrayTilted: Item ==> ()
	TrayTilted(parcel) ==
		is not yet specified;
		
	public LookUpDischarge: Item ==> ()
	LookUpDischarge(parcel) ==
		is not yet specified;

	public Running: () ==> ()
	Running () ==
	(
		while true do
		(
			/* duration(10); */ 
			(
			)
		)
	);
		
	functions 

	traces 

end Sorter