-- ===============================================================================================================
-- SorterEnvironment in tray allocation for a sortation system
-- By José Antonio Esparza and Kim Bjerge - spring 2010
-- ===============================================================================================================

class SorterEnviroment
	types

	values
		public Speed	   : nat1 = 2000;  -- Sorter speed mm/sec
		public Throughput  : nat = 10000;  -- Required items/hour		
				
	instance variables
	    
	    public static sc : SC := new SC();
	    public static trayStep : TrayStep := new TrayStep(Speed);    
	    
		public inductionGroup : seq of InductionController := [];
		itemId : nat := 0;
		itemLoader : [ItemLoader] := nil;
		busy : bool := true;
					
	operations
	
    -- SorterEnviroment constructor
	public SorterEnviroment: () ==> SorterEnviroment
	SorterEnviroment() ==
	(
	);
	
    -- Assigning item loader to SorterEnviroment
	public AssignItemLoader: (ItemLoader) ==> ()
	AssignItemLoader(il) ==
	(
		itemLoader := il;
	);	
	
    -- Assigning induction group to SorterEnviroment
	public AssignInductionGroup: seq of InductionController ==> ()
	AssignInductionGroup(ig) ==
	(
		inductionGroup := ig;
	);
	
	-- Used by traces in TestSernarios
	public FeedItemOnInduction: nat * Item ==> ()
	FeedItemOnInduction(ic, item) ==
		  inductionGroup(ic).FeedItem(item);
		
	public isFinished : () ==> () 
	isFinished() == skip;
	
	functions

	sync
	
	per isFinished => not busy;

	thread
    (
        sc.CreateAssignments(World`env);
        
        -- Start all threads in the system
    	start (trayStep);     	
		start (SC`allocator);
   		for all i in set {1,...,TrayAllocator`NumOfInductions} 
		do start (inductionGroup(i));
    	 	
  		while busy do
   		(
 			
 	 	 	for all i in set {1,...,TrayAllocator`NumOfInductions} 
			do 
			(
				-- Check for item to feed induction at time step
			 	let size = itemLoader.GetItemAtTimeStep(World`timerRef.GetTime(), i)
			 	in
					if (size > 0)
					then 
					(
			  			itemId := itemId + 1;
					    IO`print("[ " ^ String`NatToStr(World`timerRef.GetTime()) ^ "]");
			  			inductionGroup(i).FeedItem(new Item(size, itemId));
					);
	 		);
	 		   	 		
			--IO`print(".");
			World`timerRef.WaitRelative(0);
	   		World`timerRef.NotifyAndIncTime();
	  		World`timerRef.Awake();

            -- Check if simulation is finish
   			if (World`timerRef.GetTime() >= itemLoader.GetNumTimeSteps()) then
   				busy := false;

   		);

   	);

 
	traces
	
end SorterEnviroment