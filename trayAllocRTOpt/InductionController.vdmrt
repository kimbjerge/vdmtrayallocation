-- ===============================================================================================================
-- InductionController in tray allocation for a sortation system
-- By José Antonio Esparza and Kim Bjerge - spring 2010
-- ===============================================================================================================

class InductionController
	types

	values
		public InductionRate : nat = 2;    	-- minimum trays between each item

	instance variables		
		id : nat1;							-- Induction ID 
		allocator : [TrayAllocator] := nil; -- TrayAllocator
		items : seq of Item := [];			-- set of items ready to be inducted
		
	operations
	
	public InductionController: nat ==> InductionController
	InductionController(i) ==
	(
		id := i;
	);

	public AssignAllocator: TrayAllocator ==> ()
	AssignAllocator(a) ==
		allocator := a;
					  		
    -- Enviroment feeds a new item on induction
	async
	public FeedItem: Item ==> ()
	FeedItem(i) ==
	(
		--duration (100) 
		items := items ^ [i];
		--IO`print("[ " ^ String`NatToStr(time) ^ "]");
	);	

    -- Returns the next item to be inducted
    GetFirstItem: () ==> Item
    GetFirstItem() ==
    	return hd items
    pre len items <> 0;
    
    -- Removes the first item in sequence and clear priority - called from TrayAllocator
 	public InductFirstItem: () ==> ()
 	InductFirstItem() ==
 		items := tl items
   	pre len items <> 0;
 	  	
   	-- Blocked until items to induct	
   	ItemsToInduct: () ==> bool
   	ItemsToInduct () ==
   		return len items <> 0;	
   		
    -- Thread blocked until removed from Map waitingICs
	Wait: () ==> ()
	Wait() == skip;
	
	-- Wait busy on a specified time
	BusyWait: nat ==> ()
	BusyWait (t) ==
		let waitTime = time + t
		in 
			while (time < waitTime) do ();
 	  
	functions

	sync
		-- Enviroment and TrayAllocator threads
		-- mutex (FeedItem); -- Async new mutex needed!
		per FeedItem => #active(FeedItem) = 0; -- Equal to mutex
		mutex (FeedItem, InductFirstItem);
						
		-- Block thread if no items to induct 
		per ItemsToInduct => len items > 0;
		
		-- Permission predicate on Wait operation
	    per Wait => threadid not in set dom allocator.icThreadsWaiting;
		
	thread
	(
   	    --IO`print("( " ^ String`NatToStr(id) ^ ")");
		while (ItemsToInduct()) do
		(
		    -- Request tray allocator to induct item and wait for induction
		    let item = GetFirstItem()
		    in
		    (
				allocator.RequestTray(threadid, id, item);
				Wait();
				InductFirstItem();
			);

    	    --IO`print("( " ^ String`NatToStr(id) ^ ")");
    	    
			BusyWait(TrayAllocator`TrayStepTimeUnits*InductionRate);			
		);	
	);

	traces

end InductionController