-- ===========================================================================
-- TrayAllocator in tray allocation for a sortation system
-- By José Antonio Esparza and Kim Bjerge - spring 2010
-- ===========================================================================

class TrayAllocator

	types
		public ThroughputResult::
						traysWithItemOnSorter : nat
						twoTrayItemsOnSorter : nat 
						traySteps : nat
						inductedItems : nat
						calcThroughput : real;

	values
		public InductionSeperation: nat = 2;
		public NumOfInductions : nat = 4;
		public NumOfTrays : nat = 20;
		public SecInHour : nat = 3600; 		  -- Number of seconds in an hour
		public TrayStepTimeUnits : nat = 6000 -- Used to simulate tray steps 
		
	instance variables
		-- Ensure sufficient number of trays on sorter ring 
		-- based on inductions and separation
		inv NumOfTrays > InductionSeperation * NumOfInductions; 

		countTraySteps : nat := 0;  	-- Used for calculation of throughput
		countItemsInducted : nat := 0;  -- Counts the number of items inducted 
		
		-- Induction group and invariants 
		public inductionGroup : seq of Induction := [];
		inv inductionGroup <> [] => len inductionGroup = NumOfInductions; 
		-- Induction id and inds of inductionGroup sequence must be the same
		inv forall id in set inds inductionGroup 
					& inductionGroup(id).GetId() = id;
			
		-- Sorter ring and invariants	
		public sorterRing : inmap Tray`UID to Tray := {|->};
		inv sorterRing <> {|->} => card dom sorterRing = NumOfTrays;
		-- Tray id and dom of sorterRing map must be the same
		inv forall id in set dom sorterRing & sorterRing(id).GetId() = id;
		
		-- Tray at card reader and invariants
		public trayAtCardReader : [Tray`UID] := nil;
		-- trayAtCardReader must be a valid tray in sorterRing
		inv trayAtCardReader <> nil  => trayAtCardReader in set dom sorterRing;
		
		-- Allocation "strategy pattern" for one and two tray items
		oneTrayStrategy : [AllocatorOneTray] := nil;
		twoTrayStrategy : [AllocatorTwoTray] := nil;	
		
		-- Map of waiting inductions with an item to be inducted 
		itemsToInductMap : map nat to (Induction * Item) := {|->};
		-- Map of thread ids to IC ids
		public icThreadsWaiting : map nat to nat1 := {|->}; 
		inv dom itemsToInductMap = dom icThreadsWaiting;
		
		-- Counting number of trays simulated
		trayCount: nat := 0;
		
		-- Flag to stop simulation
		busy: bool := true;
						
	operations
	
    -- TrayAllocator constructor
	public TrayAllocator: () ==> TrayAllocator
	TrayAllocator() ==
	(
		-- CreateAllocatorObjs();
	);

	public CreateAllocatorObjs: () ==> ()
	CreateAllocatorObjs() ==
	(
	    sorterRing := {num |-> new Tray(num) | 
	                   num in set {1,...,NumOfTrays}};
	    inductionGroup := [new Induction(id) | 
	                       id in set {1,...,NumOfInductions}];
        
        -- Creating strategies for allocation of one and two tray items
        oneTrayStrategy := new AllocatorOneTray(self);
        twoTrayStrategy := new AllocatorTwoTray(self);
	);
	
    -- Simulate sorter-ring moved one tray step
	public CardReader: Tray`UID  ==> ()
	CardReader(uid) ==
	(
	   	-- Update current tray at card reader
	    trayAtCardReader := uid;
	    
	 	-- Count the number of tray steps 
		countTraySteps := countTraySteps + 1;
	)
	pre uid in set dom sorterRing;
	
	-- Inducting item on sorter if empty trays and no higher induction priority
	public InductItem: Induction * Item ==> bool
	InductItem(ic, item) ==
	(
		dcl strategy : AllocatorStrategy;
		
		-- Determine the strategy to compute the allocation of trays
		let numTrays = item.GetSizeOfTrays()
		in 
			cases numTrays:
				1 -> strategy := oneTrayStrategy,
				2 -> strategy := twoTrayStrategy
			end;
		
		-- Central part of the Tray allocation algorithm 
		-- Look for inductions with higher priority
		if strategy.InductionsWithHigherPriority(ic)
		then
		 	return false
		else
			let trays = strategy.AllocateTray(ic.GetId())
			in 
			    if trays = {}
			    then 
			    	return false
			    else
			    ( 
			    	countItemsInducted := countItemsInducted + 1;
					--LogError 
					--IO`print("*Induction id " 
					--          ^ String`NatToStr(ic.GetId()) ^ "\n");
					-- Assign item to trays
			    	PutItemOnTrays(item, trays);
			    	return true;
			    ) 
	)
	pre ic in set elems inductionGroup and item.GetSizeOfTrays() <= 2;  
	-- To be changed if Tray`ItemMaxTrays is increased
	
	-- Assign item on empty trays 
	private PutItemOnTrays: Item * set of Tray ==> ()
	PutItemOnTrays(item, trays) ==
		if trays <> {} then
		let t in set trays
		in 
		( 
			t.ItemOnTray(item);
			PutItemOnTrays(item, trays \ {t});
		)
	pre forall t in set trays & t.IsTrayEmpty();
	
	-- Returns true if sorter is full
	public IsSorterFull: () ==> bool
	IsSorterFull() ==
	 	return forall id in set dom sorterRing & 
	 	       sorterRing(id).GetState() = <Full>;

	-- Returns calculated throughput of soter capacity 
	-- for current state of sorter ring
	public GetThroughput: () ==> ThroughputResult
	GetThroughput () ==
		CalculateThroughput(countTraySteps, rng sorterRing, countItemsInducted);
	 
	-- Called by InductionController thread requesting to induct item
	public RequestTray: nat * nat * Item ==> ()
	RequestTray (tid, icid, item) ==
	let ic = inductionGroup(icid)
	in
		AddItem(tid, ic, item)
	pre icid in set inds inductionGroup
	    and tid not in set dom itemsToInductMap;
		
    -- Add induction waiting with item to induct
	AddItem: nat * Induction * Item ==> ()
	AddItem (t, ic, item) ==
	atomic (
			itemsToInductMap := itemsToInductMap munion {t |-> mk_(ic, item)};
			icThreadsWaiting := icThreadsWaiting munion {t |-> ic.GetId()}
	)
	pre t not in set dom itemsToInductMap;
	
    -- Release induction waiting with item to induct
	ReleaseWaitingIC: nat ==> ()
	ReleaseWaitingIC (t) ==
	atomic (
			itemsToInductMap := {t} <-: itemsToInductMap;
			icThreadsWaiting := {t} <-: icThreadsWaiting
	)
	pre t in set dom itemsToInductMap;
	
	-- Returns 
	CheckItemsToInduct: () ==> ()
	CheckItemsToInduct () ==
	(
		-- Induct items for all waiting inductions
		for all t in set dom itemsToInductMap
		do
			let mk_(ic, item) = itemsToInductMap(t)
			in
				if InductItem(ic, item) then
				(
					ic.ClearPriority();
					ReleaseWaitingIC(t);
				)
				else 
					ic.IncrementPriority();		
	);
	
	public StopSimulation: () ==> ()
	StopSimulation () == busy := false;
		
	-- Periodic thread operation that simulates the TrayStep		
    TrayStep: () ==> ()
    TrayStep () ==
    (
    	if (busy) then
    	(   	    
	   	    --IO`print("< " ^ String`NatToStr(time) ^ ">>>");
	        trayCount := trayCount + 1;
	   	    --LogError IO`print("< " ^ String`NatToStr(trayCount) ^ ">");
	  
	  		CardReader(trayCount mod TrayAllocator`NumOfTrays + 1);
			
			-- Induct items for all waiting inductions
			CheckItemsToInduct();
	   	    --IO`print("<<< " ^ String`NatToStr(time) ^ ">");
   	    );
    );
 
    
	functions

	-- Calculates the current throughput based on items on sorter ring 
	/*
	Calculation as sum of simulation 
    time steps = number of steps * Tray`TraySize/SorterEnviroment`Speed
    throughput calculated as items inducted in simulation time converted to items/hour 
    calculate the number of items inducted = number of tray with status equal <full> 
    minus sum of two tray items divied by 2
	*/
	private CalculateThroughput: nat * set of Tray * nat-> ThroughputResult
	CalculateThroughput(steps, trays, items) ==
		let runTime :real = steps * (Tray`Size/SorterEnviroment`Speed),
			traysWithItems = {twi | twi in set trays & twi.IsTrayFull()},
			traysWith2Items = {tw2i | tw2i in set traysWithItems & tw2i.GetItem() <> nil 
			                          and tw2i.GetItem().GetSizeOfTrays() = 2},
			itemsOnSorter = card traysWithItems, 
			twoTrayItemsOnSorter = card traysWith2Items / 2,
			throughput = itemsOnSorter * SecInHour/runTime
		in 
			mk_ThroughputResult(itemsOnSorter, twoTrayItemsOnSorter, 
			                    steps, items, throughput)
	pre trays <> {};
	
	sync

	mutex(RequestTray);  -- Only allows one induction at a time to induct items
	-- Mutex to ensure syncronization between InductionController and TrayAllocator
	mutex(RequestTray, CheckItemsToInduct);
	
	thread
		-- Time units to simulate tray steps jitter 0%
		periodic (6000, 0, 0, 0) (TrayStep);
		
	traces

end TrayAllocator